/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = CyberSource.Client.SwaggerDateConverter;

namespace CyberSource.Model
{
    /// <summary>
    /// RiskV1DecisionsPost201ResponseRiskInformationTravel
    /// </summary>
    [DataContract]
    public partial class RiskV1DecisionsPost201ResponseRiskInformationTravel :  IEquatable<RiskV1DecisionsPost201ResponseRiskInformationTravel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskV1DecisionsPost201ResponseRiskInformationTravel" /> class.
        /// </summary>
        /// <param name="ActualFinalDestination">ActualFinalDestination.</param>
        /// <param name="FirstDeparture">FirstDeparture.</param>
        /// <param name="FirstDestination">FirstDestination.</param>
        /// <param name="LastDestination">LastDestination.</param>
        public RiskV1DecisionsPost201ResponseRiskInformationTravel(RiskV1DecisionsPost201ResponseRiskInformationTravelActualFinalDestination ActualFinalDestination = default(RiskV1DecisionsPost201ResponseRiskInformationTravelActualFinalDestination), RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDeparture FirstDeparture = default(RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDeparture), RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDestination FirstDestination = default(RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDestination), RiskV1DecisionsPost201ResponseRiskInformationTravelLastDestination LastDestination = default(RiskV1DecisionsPost201ResponseRiskInformationTravelLastDestination))
        {
            this.ActualFinalDestination = ActualFinalDestination;
            this.FirstDeparture = FirstDeparture;
            this.FirstDestination = FirstDestination;
            this.LastDestination = LastDestination;
        }
        
        /// <summary>
        /// Gets or Sets ActualFinalDestination
        /// </summary>
        [DataMember(Name="actualFinalDestination", EmitDefaultValue=false)]
        public RiskV1DecisionsPost201ResponseRiskInformationTravelActualFinalDestination ActualFinalDestination { get; set; }

        /// <summary>
        /// Gets or Sets FirstDeparture
        /// </summary>
        [DataMember(Name="firstDeparture", EmitDefaultValue=false)]
        public RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDeparture FirstDeparture { get; set; }

        /// <summary>
        /// Gets or Sets FirstDestination
        /// </summary>
        [DataMember(Name="firstDestination", EmitDefaultValue=false)]
        public RiskV1DecisionsPost201ResponseRiskInformationTravelFirstDestination FirstDestination { get; set; }

        /// <summary>
        /// Gets or Sets LastDestination
        /// </summary>
        [DataMember(Name="lastDestination", EmitDefaultValue=false)]
        public RiskV1DecisionsPost201ResponseRiskInformationTravelLastDestination LastDestination { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RiskV1DecisionsPost201ResponseRiskInformationTravel {\n");
            sb.Append("  ActualFinalDestination: ").Append(ActualFinalDestination).Append("\n");
            sb.Append("  FirstDeparture: ").Append(FirstDeparture).Append("\n");
            sb.Append("  FirstDestination: ").Append(FirstDestination).Append("\n");
            sb.Append("  LastDestination: ").Append(LastDestination).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as RiskV1DecisionsPost201ResponseRiskInformationTravel);
        }

        /// <summary>
        /// Returns true if RiskV1DecisionsPost201ResponseRiskInformationTravel instances are equal
        /// </summary>
        /// <param name="other">Instance of RiskV1DecisionsPost201ResponseRiskInformationTravel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskV1DecisionsPost201ResponseRiskInformationTravel other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ActualFinalDestination == other.ActualFinalDestination ||
                    this.ActualFinalDestination != null &&
                    this.ActualFinalDestination.Equals(other.ActualFinalDestination)
                ) && 
                (
                    this.FirstDeparture == other.FirstDeparture ||
                    this.FirstDeparture != null &&
                    this.FirstDeparture.Equals(other.FirstDeparture)
                ) && 
                (
                    this.FirstDestination == other.FirstDestination ||
                    this.FirstDestination != null &&
                    this.FirstDestination.Equals(other.FirstDestination)
                ) && 
                (
                    this.LastDestination == other.LastDestination ||
                    this.LastDestination != null &&
                    this.LastDestination.Equals(other.LastDestination)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ActualFinalDestination != null)
                    hash = hash * 59 + this.ActualFinalDestination.GetHashCode();
                if (this.FirstDeparture != null)
                    hash = hash * 59 + this.FirstDeparture.GetHashCode();
                if (this.FirstDestination != null)
                    hash = hash * 59 + this.FirstDestination.GetHashCode();
                if (this.LastDestination != null)
                    hash = hash * 59 + this.LastDestination.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

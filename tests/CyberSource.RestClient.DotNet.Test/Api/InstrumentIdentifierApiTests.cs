/* 
 * CyberSource Merged Spec
 *
 * All CyberSource API specs merged together. These are available at https://developer.cybersource.com/api/reference/api-reference.html
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using NUnit.Framework;
using CyberSource.Api;

namespace CyberSource.Test
{
    /// <summary>
    ///  Class for testing InstrumentIdentifierApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class InstrumentIdentifierApiTests
    {
        private InstrumentIdentifierApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new InstrumentIdentifierApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InstrumentIdentifierApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' InstrumentIdentifierApi
            //Assert.IsInstanceOfType(typeof(InstrumentIdentifierApi), instance, "instance is a InstrumentIdentifierApi");
        }

        
        /// <summary>
        /// Test CreateInstrumentIdentifier
        /// </summary>
        [Test]
        public void CreateInstrumentIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string profileId = null;
            //CreateInstrumentIdentifierRequest createInstrumentIdentifierRequest = null;
            //var response = instance.CreateInstrumentIdentifier(profileId, createInstrumentIdentifierRequest);
            //Assert.IsInstanceOf<TmsV1InstrumentIdentifiersPost200Response> (response, "response is TmsV1InstrumentIdentifiersPost200Response");
        }
        
        /// <summary>
        /// Test DeleteInstrumentIdentifier
        /// </summary>
        [Test]
        public void DeleteInstrumentIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string profileId = null;
            //string tokenId = null;
            //instance.DeleteInstrumentIdentifier(profileId, tokenId);
            
        }
        
        /// <summary>
        /// Test GetAllPaymentInstruments
        /// </summary>
        [Test]
        public void GetAllPaymentInstrumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string profileId = null;
            //string tokenId = null;
            //long? offset = null;
            //long? limit = null;
            //var response = instance.GetAllPaymentInstruments(profileId, tokenId, offset, limit);
            //Assert.IsInstanceOf<TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response> (response, "response is TmsV1InstrumentIdentifiersPaymentInstrumentsGet200Response");
        }
        
        /// <summary>
        /// Test GetInstrumentIdentifier
        /// </summary>
        [Test]
        public void GetInstrumentIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string profileId = null;
            //string tokenId = null;
            //var response = instance.GetInstrumentIdentifier(profileId, tokenId);
            //Assert.IsInstanceOf<TmsV1InstrumentIdentifiersPost200Response> (response, "response is TmsV1InstrumentIdentifiersPost200Response");
        }
        
        /// <summary>
        /// Test UpdateInstrumentIdentifier
        /// </summary>
        [Test]
        public void UpdateInstrumentIdentifierTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string profileId = null;
            //string tokenId = null;
            //UpdateInstrumentIdentifierRequest updateInstrumentIdentifierRequest = null;
            //var response = instance.UpdateInstrumentIdentifier(profileId, tokenId, updateInstrumentIdentifierRequest);
            //Assert.IsInstanceOf<TmsV1InstrumentIdentifiersPost200Response> (response, "response is TmsV1InstrumentIdentifiersPost200Response");
        }
        
    }

}
